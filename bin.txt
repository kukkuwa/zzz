//Diomand pattern
public class RhombusPattern {
    public static void main(String[] args) {
        int n = 5; // Number of rows in the rhombus
        
        for (int i = 1; i <= n; i++) {
            // Print spaces before the stars in each row
            for (int j = 1; j <= n - i; j++) {
                System.out.print(" ");
            }
            
            // Print stars in the current row
            for (int j = 1; j <= 2 * i - 1; j++) {
                System.out.print("*");
            }
            
            // Move to the next line
            System.out.println();
        }
        
        for (int i = n - 1; i >= 1; i--) {
            // Print spaces before the stars in each row
            for (int j = 1; j <= n - i; j++) {
                System.out.print(" ");
            }
            
            // Print stars in the current row
            for (int j = 1; j <= 2 * i - 1; j++) {
                System.out.print("*");
            }
            
            // Move to the next line
            System.out.println();
        }
    }
}
..................................................................................


// For any given number n, print Hollow and solid Squares and Rhombus made with stars(*). 

import java.io.*;
 
class GFG 
{
    // Function for Solid Rhombus
    static void solidRhombus(int rows)
    {
        int i, j;
        for (i=1; i<=rows; i++)
        {
            // Print trailing spaces
            for (j=1; j<=rows - i; j++)
                System.out.print(" ");
              
            // Print stars after spaces
            for (j=1; j<=rows; j++)
                System.out.print("*");
              
            // Move to the next line/row
            System.out.println();
        }
    }
  


    // Function for Hollow Rhombus
    static void hollowRhombus(int rows)
    {
        int i, j;
        for (i=1; i<=rows; i++)
        {
            // Print trailing spaces
            for (j=1; j<=rows - i; j++)
                System.out.print(" ");
              
            // Print stars after spaces
            // Print stars for each solid rows
            if (i==1 || i==rows)
                for (j=1; j<=rows; j++)
                    System.out.print("*");
                  
            // stars for hollow rows
            else
                for (j=1; j<=rows; j++)
                    if (j==1 || j==rows)
                        System.out.print("*");
                    else
                        System.out.print(" ");
            // Move to the next line/row
            System.out.println();
        }
    }
  
    
    static void printPattern(int rows)
    {
        System.out.println("Solid Rhombus:");
        solidRhombus(rows);
      
        System.out.println("Hollow Rhombus:");
        hollowRhombus(rows);
    }
     
    // driver program
    public static void main (String[] args) 
    {
        int rows = 5;
        printPattern (rows);
    }
}

++++++++++++++++++++++++++++++++++++++++++++++++++++++
//reverse a String
public class Main {
  public static void main(String[] args) {
    String originalStr = "Hello";
    String reversedStr = "";
    System.out.println("Original string: " + originalStr);
        
    for (int i = 0; i < originalStr.length(); i++) {
      reversedStr = originalStr.charAt(i) + reversedStr;
    }
    
    System.out.println("Reversed string: "+ reversedStr);
  }
}






//Count words of a String

public class CountWords {
  public static void main(String[] args) {
    String words = "One Two Three Four";
    int countWords = words.split("\\s").length;
    System.out.println(countWords);
  }
}










//Sum of a Array element

int[] myArray = {1, 5, 10, 25};
int sum = 0;
int i; 

// Loop through the array elements and store the sum in the sum variable
for (i = 0; i < myArray.length; i++) {
  sum += myArray[i];
}

System.out.println("The sum is: " + sum);







//String game
import java.util.Scanner;

public class FunGameWithNumbersAndStrings {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        int choice;

        do {
            // Display the main menu
            System.out.println("*** Welcome to explore with Fun Game ***");
            System.out.println("\"SELECT FROM THE MAIN MENU\"");
            System.out.println("1. Print Hollow Mirrored Rhombus");
            System.out.println("2. Reverse Your Name");
            System.out.println("3. Find Vowels in your Name");
            System.out.println("4. Reverse a Number");
            System.out.println("5. Reverse an Array");
            System.out.println("6. GCD of Two Numbers");
            System.out.println("0. Exit");

            // Ask the user to enter their choice
            System.out.print("Enter your choice (1-6, or 0 to exit): ");
            choice = scanner.nextInt();

            switch (choice) {
                case 1:
                    printHollowMirroredRhombus();
                    break;
                case 2:
                    reverseName();
                    break;
                case 3:
                    findVowelsInName();
                    break;
                case 4:
                    reverseNumber();
                    break;
                case 5:
                    reverseArray();
                    break;
                case 6:
                    findGCD();
                    break;
                case 0:
                    // Exit the program
                    System.out.println("Exiting Fun Game. Goodbye!");
                    break;
                default:
                    System.out.println("Invalid choice. Please enter a valid option.");
            }
        } while (choice != 0);

        scanner.close();
    }

    // Method to print a hollow mirrored rhombus
    public static void printHollowMirroredRhombus() {
        Scanner scanner = new Scanner(System.in);
        
        System.out.print("Enter the number of rows: ");
        int rows = scanner.nextInt();
        System.out.print("Enter the number of columns: ");
        int columns = scanner.nextInt();
        scanner.nextLine(); // Consume the newline character
        System.out.print("Enter the symbol to print: ");
        String symbol = scanner.nextLine();
        
        if (rows <= 0 || columns <= 0 || symbol.length() != 1) {
            System.out.println("Invalid input. Please enter valid values.");
            return;
        }

        for (int i = 1; i <= rows; i++) {
            for (int j = 1; j <= rows - i; j++) {
                System.out.print(" ");
            }
            for (int j = 1; j <= columns; j++) {
                if (i == 1 || i == rows || j == 1 || j == columns) {
                    System.out.print(symbol);
                } else {
                    System.out.print(" ");
                }
            }
            System.out.println();
        }
    }

















    // Method to reverse a name or string
    public static void reverseName() {
        Scanner scanner = new Scanner(System.in);
        
        System.out.print("Enter your name or string: ");
        scanner.nextLine(); // Consume the newline character
        String input = scanner.nextLine();
        
        if (input.isEmpty()) {
            System.out.println("Invalid input. Please enter a non-empty string.");
            return;
        }

        String reversed = new StringBuilder(input).reverse().toString();
        System.out.println("The reverse of the input: " + reversed);
    }

    // Method to find and print vowels in a name
    public static void findVowelsInName() {
        Scanner scanner = new Scanner(System.in);
        
        System.out.print("Enter your name: ");
        scanner.nextLine(); // Consume the newline character
        String name = scanner.nextLine();
        
        if (name.isEmpty()) {
            System.out.println("Invalid input. Please enter a non-empty name.");
            return;
        }

        String lowercaseName = name.toLowerCase();
        System.out.print("Vowels in your name: ");
        for (int i = 0; i < lowercaseName.length(); i++) {
            char ch = lowercaseName.charAt(i);
            if (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u') {
                System.out.print(name.charAt(i) + " ");
            }
        }
        System.out.println();
    }

    // Method to reverse a number
    public static void reverseNumber() {
        Scanner scanner = new Scanner(System.in);
        
        System.out.print("Enter a number (with more than 2 digits): ");
        int number = scanner.nextInt();
        
        if (Math.abs(number) < 10) {
            System.out.println("Invalid input. Please enter a number with more than 2 digits.");
            return;
        }

        int reversed = 0;
        while (number != 0) {
            int digit = number % 10;
            reversed = reversed * 10 + digit;
            number /= 10;
        }
        System.out.println("The reverse order of your number: " + reversed);
    }

    // Method to reverse an array of integers
    public static void reverseArray() {
        Scanner scanner = new Scanner(System.in);
        
        System.out.print("Enter the number of values in the array: ");
        int count = scanner.nextInt();
        int[] array = new int[count];

        System.out.print("Enter " + count + " values for an integer array: ");
        for (int i = 0; i < count; i++) {
            array[i] = scanner.nextInt();
        }

        System.out.print("The reversed Array: ");
        for (int i = count - 1; i >= 0; i--) {
            System.out.print(array[i] + " ");
        }
        System.out.println();
    }

    // Method to find the Greatest Common Divisor (GCD) of two numbers
    public static void findGCD() {
        Scanner scanner = new Scanner(System.in);
        
        System.out.print("Enter the first number: ");
        int num1 = scanner.nextInt();
        System.out.print("Enter the second number: ");
        int num2 = scanner.nextInt();
        
        if (num1 <= 0 || num2 <= 0) {
            System.out.println("Invalid input. Please enter two positive numbers.");
            return;
        }

        int gcd = findGCDHelper(num1, num2);
        System.out.println("The GCD of " + num1 + " and " + num2 + " is " + gcd);
    }

    // Helper method to find the GCD using Euclidean algorithm
    public static int findGCDHelper(int a, int b) {
        if (b == 0) {
            return a;
        }
        return findGCDHelper(b, a % b);
    }
}
.............................................................................



















//Convert a String to Character Array in Java
import java.util.*;

class StringtoCharArray {

  public static void main(String args[]) {
    String str = "Scaler"; // Given String

    // Creating array of string length
    char[] arr = new char[str.length()];

    // Copy character by character into array
    for (int i = 0; i < str.length(); i++) {
      arr[i] = str.charAt(i);
    }

    // Printing the character array
    for (char x : arr) {
      System.out.println(x);
    }


abstract class

// Abstract class representing a calculator
abstract class Calculator {
    public abstract double add(double num1, double num2);
    public abstract double subtract(double num1, double num2);
    public abstract double multiply(double num1, double num2);
    public abstract double divide(double num1, double num2);
}

// Concrete subclass implementing the basic calculator
class BasicCalculator extends Calculator {
    @Override
    public double add(double num1, double num2) {
        return num1 + num2;
    }

    @Override
    public double subtract(double num1, double num2) {
        return num1 - num2;
    }

    @Override
    public double multiply(double num1, double num2) {
        return num1 * num2;
    }

    @Override
    public double divide(double num1, double num2) {
        if (num2 == 0) {
            System.out.println("Error: Division by zero");
            return Double.NaN; // Not-a-Number
        }
        return num1 / num2;
    }
}

public class CalculatorApp {
    public static void main(String[] args) {
        BasicCalculator calculator = new BasicCalculator();

        double num1 = 10.0;
        double num2 = 5.0;

        // Perform calculations
        System.out.println("Addition: " + calculator.add(num1, num2));
        System.out.println("Subtraction: " + calculator.subtract(num1, num2));
        System.out.println("Multiplication: " + calculator.multiply(num1, num2));
        System.out.println("Division: " + calculator.divide(num1, num2));
    }
}








-----------------------------------------------------------
//3d array


class ThreeArray {
public static void main(String[] args) {
// create a 3d array
int[][][] test = {
{
{1, -2, 3},
{2, 3, 4}
},
{
{-4, -5, 6, 9},
{1},
{2, 3}
}
};
// for..each loop to iterate through elements of 3d array
for (int[][] array2D: test) {
for (int[] array1D: array2D) {
for(int item: array1D) {
System.out.println(item);
}
}
}
}
}




-----------------------------------------------------

public class RightTrianglePattern
{
public static void main(String args[])
{
//i for rows and j for columns
//row denotes the number of rows you want to print
int i, j, row=6;
//outer loop for rows
for(i=0; i<row; i++)
{
//inner loop for columns
for(j=0; j<=i; j++)
{
//prints stars
System.out.print("* ");
}
//throws the cursor in a new line after printing each line
System.out.println();
}
}
}

.....................................................................
1
12
123
1234
12345
123456
1234567



//Number pattern

public class Pattern1
{
public static void main(String args[])
{
int i, j,number, n=7;
//loop for rows
for(i=0; i<n; i++)
{
number=1;
//loop for columns
for(j=0; j<=i; j++)
{
//prints num
System.out.print(number+ " ");
//incrementing the value of number
number++;
}
//throws the cursor at the next line after printing each row
System.out.println();
}
}
}


......................................................................
A
ABC
ABCD

ABCDEFGHI



public class RightAlphabaticPattern
{
public static void main(String[] args)
{
int alphabet = 65; //ASCII value of capital A is 65
//inner loop for rows
for (int i = 0; i <= 8; i++)
{
//outer loop for columns
for (int j = 0; j <= i; j++)
{
//adds the value of j in the ASCII value of A and prints the corresponding alphabet
System.out.print((char) (alphabet + j) + " ");
}
System.out.println();
}
}
}


RIGHT-TRIANGLE PATTERN

*
**
***

public class RightTrianglePattern   
{   
public static void main(String args[])   
{   
//i for rows and j for columns      
//row denotes the number of rows you want to print  
int i, j, row=6;   
//outer loop for rows  
for(i=0; i<row; i++)   
{   
//inner loop for columns  
for(j=0; j<=i; j++)   
{   
//prints stars   
System.out.print("* ");   
}   
//throws the cursor in a new line after printing each line  
System.out.println();   
}   
}   
}  

LEFT TRIANGLE.............................................

public class LeftTrianglePattern  
{    
public static void main(String args[])   
{    
//i for rows and j for columns      
//row denotes the number of rows you want to print  
int i, j, row = 6;       
//Outer loop work for rows  
for (i=0; i<row; i++)   
{  
//inner loop work for space      
for (j=2*(row-i); j>=0; j--)         
{  
//prints space between two stars      
System.out.print(" ");   
}   
//inner loop for columns  
for (j=0; j<=i; j++ )   
{   
//prints star      
System.out.print("* ");   
}   
//throws the cursor in a new line after printing each line  
System.out.println();   
}   
}   
}  



PYRAMID STAR.............................


public class PyramidPattern  
{    
public static void main(String args[])   
{    
//i for rows and j for columns      
//row denotes the number of rows you want to print  
int i, j, row = 6;       
//Outer loop work for rows  
for (i=0; i<row; i++)   
{  
//inner loop work for space      
for (j=row-i; j>1; j--)   
{  
//prints space between two stars  
System.out.print(" ");   
}   
//inner loop for columns  
for (j=0; j<=i; j++ )   
{   
//prints star      
System.out.print("* ");   
}   
//throws the cursor in a new line after printing each line  
System.out.println();   
}   
}   
}  


Diomand shape star pattern++++++++++++++++++++++++++++++++++++

import java.util.Scanner;  
public class DiamondPattern  
{  
public static void main(String args[])  
{  
int row, i, j, space = 1;  
System.out.print("Enter the number of rows you want to print: ");  
Scanner sc = new Scanner(System.in);  
row = sc.nextInt();  
space = row - 1;  
for (j = 1; j<= row; j++)  
{  
for (i = 1; i<= space; i++)  
{  
System.out.print(" ");  
}  
space--;  
for (i = 1; i <= 2 * j - 1; i++)  
{  
System.out.print("*");  
}  
System.out.println("");  
}  
space = 1;  
for (j = 1; j<= row - 1; j++)  
{  
for (i = 1; i<= space; i++)  
{  
System.out.print(" ");  
}  
space++;  
for (i = 1; i<= 2 * (row - j) - 1; i++)  
{  
System.out.print("*");  
}  
System.out.println("");  
}  
}  
}  

complex triangle...............................................................



public class DownwardTrianglePattern  
{  
public static void main(String[] args)  
{  
int rows=7;      
//inner loop  
for (int i= rows-1; i>=0 ; i--)  
{  
//outer loop  
for (int j=0; j<=i; j++)  
{  
//prints star and space  
System.out.print("*" + " ");  
}  
//throws the cursor in the next line after printing each line  
System.out.println();  
}  
}  
}  


down triangle

*******
******
*****
****
***
**
*

public class DownwardTrianglePattern  
{  
public static void main(String[] args)  
{  
int rows=7;      
//inner loop  
for (int i= rows-1; i>=0 ; i--)  
{  
//outer loop  
for (int j=0; j<=i; j++)  
{  
//prints star and space  
System.out.print("*" + " ");  
}  
//throws the cursor in the next line after printing each line  
System.out.println();  
}  
}  
}

*
**  _______>
****
******
********
public class MirroredRightTrianglePattern   
{  
public static void main(String[] args)  
{  
int n=7;  
//inner loop  
for (int i= 0; i<= n; i++)  
{  
//outer loop  
for (int j=1; j<=n-i; j++)  
{  
System.out.print(" ");  
}  
for (int k=0;k<=i;k++)  
{  
System.out.print("*");  
}   
System.out.println("");  
}  
}  
}  




Reverse pyramid...................................


	*********
	 *******
	   ***
	    *
public class ReversePyramidPattern  
{  
public static void main(String[] args)  
{  
int rows=8;  
for (int i= 0; i<= rows-1; i++)  
{  
for (int j=0; j<=i; j++)  
{  
System.out.print(" ");  
}  
for (int k=0; k<=rows-1-i; k++)  
{  
System.out.print("*" + " ");  
}  
System.out.println();  
}  
}  
}  


Right Pascal's Triangle.....................................

import java.util.Scanner;  
public class RightPascalTrianglePattern  
{  
public static void main(String[] args)  
{  
int i, j, rows;  
Scanner sc = new Scanner(System.in);  
System.out.print("Enter the number of rows you want to print: ");  
rows = sc.nextInt();          
for (i= 0; i<= rows-1; i++)  
{  
for (j=0; j<=i; j++)   
{  
System.out.print("*"+ " ");  
}   
System.out.println("");   
}   
for (i=rows-1; i>=0; i--)  
{  
for(j=0; j <= i-1;j++)  
{  
System.out.print("*"+ " ");  
}  
System.out.println("");  
}  
}  
}  

Left Pascal's Triangle'''''''''''''''''''''''''''

import java.util.Scanner;  
public class LeftPascalTrianglePattern  
{  
public static void main(String[] args)  
{  
int i, j, k, rows;  
Scanner sc = new Scanner(System.in);  
System.out.print("Enter the number of rows you want to print: ");  
rows = sc.nextInt();          
for (i= 1; i<= rows ; i++)  
{  
for (j=i; j <rows ;j++)              
{  
System.out.print(" ");  
}  
for (k=1; k<=i;k++)   
{  
System.out.print("*");   
}   
System.out.println("");   
}   
for (i=rows; i>=1; i--)  
{  
for(j=i; j<=rows;j++)  
{  
System.out.print(" ");  
}  
for(k=1; k<i ;k++)   
{  
System.out.print("*");  
}  
System.out.println("");  
}  
sc.close();  
}  
}  

Number pattern:::::::::::::::::::::::::::::::::::::::::::::::::::::


public class Pattern1  
{  
public static void main(String args[])   
{   
int i, j,number, n=7;   
//loop for rows  
for(i=0; i<n; i++)  
{   
number=1;   
//loop for columns  
for(j=0; j<=i; j++)  
{   
//prints num  
System.out.print(number+ " ");   
//incrementing the value of number   
number++;   
}   
//throws the cursor at the next line after printing each row  
System.out.println();   
}   
}   
}  

Number pattern>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

public class Pattern2  
{              
public static void main(String[] args)   
{  
int i, j, k = 1;  
//inner loop  
for (i = 1; i <= 7; i++)   
{  
//outer loop  
for (j = 1; j< i + 1; j++)   
{  
//prints the value of k  
System.out.print(k++ + " ");  
}  
//throws the cursor at the next line  
System.out.println();  
}  
}  
}  

..............................................................
Deconstructor

public class MyClass {
    // Constructor
    public MyClass() {
        // Initialization code
    }

    // Finalizer
    @Override
    protected void finalize() throws Throwable {
        try {
            // Cleanup code here
        } finally {
            super.finalize();
        }
    }
}









Constructor.......................................


public class Student {
    private int number;
    private String name;
    private int marks1;
    private int marks2;
    private int marks3;
    private int total;
    private double average;
    private String grade;

    public Student(int number, String name, int marks1, int marks2, int marks3) {
        this.number = number;
        this.name = name;
        this.marks1 = marks1;
        this.marks2 = marks2;
        this.marks3 = marks3;
    }

    public void calculateTotalAverageGrade() {
        total = marks1 + marks2 + marks3;
        average = total / 3.0;

        if (average >= 40) {
            grade = "Pass";
        } else {
            grade = "Fail";
        }
    }

    public void display() {
        System.out.println("Student Number: " + number);
        System.out.println("Student Name: " + name);
        System.out.println("Marks 1: " + marks1);
        System.out.println("Marks 2: " + marks2);
        System.out.println("Marks 3: " + marks3);
        System.out.println("Total Marks: " + total);
        System.out.println("Average: " + average);
        System.out.println("Grade: " + grade);
    }

    public static void main(String[] args) {
        Student student = new Student(123, "John Doe", 85, 72, 93); // Example values for number, name, and marks
        student.calculateTotalAverageGrade();
        student.display();
    }
}
































Method overloading.....................................................



 class EX03{

    static void Display (String Index_No,String Name){
        System.out.println("Index Number Is : "+Index_No);
        System.out.println("Name Is : "+Name);

    }
    static void Display (String Index_No,String Name,int Age){
        System.out.println("Index Number Is : "+Index_No);
        System.out.println("Name Is : "+Name);
        System.out.println("Age Is : "+Age);

    }
    static  void Display (String Index_No,String Name,int Age,int Marks1,int Marks2,int Marks3){
        System.out.println("Index Number Is : "+Index_No);
        System.out.println("Name Is : " +Name);
        System.out.println("Age Is : " + Age);
        System.out.println("Marks1 Is : " + Marks1);
        System.out.println("Marks2 Is : " + Marks2);
        System.out.println("Marks3 Is : " + Marks3);

    }

    public static void main(String []args){
        
        
        System.out.println("--------------------Frist Methods--------------");
        Display("S1001","Kalhara");
        System.out.println("");
        System.out.println("");

        System.out.println("---------------------Second Methods------------------");
        Display("S1001","Kalhara",22);
        System.out.println("");
        System.out.println("");

        System.out.println("-----------------Therd Methods-------------------");
        Display("S1001","Kalhara",22,89,80,75);
    }


 }





import javax.swing.*;
public class FristSwingExample{

    public static void main(String []args){
        JFrame f = new JFrame();//creating instance of JFrame

        JButton b = new JButton("click");//creating instance of JButton

        b.setBounds(130,100,100,40);//x axis,y axis,width,height

        f.add(b);//Adding  button in Jframe

        f.setSize(400,500);//400 width and 500 height

        f.setLayout(null);//using no layout manager

        f.setVisible(true);//Making the frame visible

   
    }

}










class Student{
    int stno;
    String name;

    Student(int Stno, String Name){
        this.stno =Stno;
        this.name=Name;

    }
    void display(){
        System.out.println("Student Number is : "+stno);
        System.out.println("Student Name is: "+name);
    }
}

class ITStudent extends Student{

    float Total,Average,marks1,marks2;

    ITStudent(int  Stno, String Name,float Marks1,float Marks2){
        super(Stno,Name);
        this.marks1 =Marks1;
        this.marks2 = Marks2;

    }

void Calculation(){
    Total = marks1 +marks2;
    Average =Total/3;
}


void display(){
        super.display();
        System.out.println("Student Marke1 is : "+marks1);
        System.out.println("Student  Marke2 is: "+marks2);
        System.out.println("Student Marke Total is : "+Total);
        System.out.println("Student  Marke Average is: "+Average);

    }
}

class TestStudent{
    public static  void main(String []args){
        ITStudent obj1 = new ITStudent(1001,"Kalhara",90,80);
        obj1.Calculation();
        obj1.display();

    }
}

















Abstract calculator>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

abstract class Calculation {
    abstract double calculate(double num1, double num2);
}

class Addition extends Calculation {
    @Override
    double calculate(double num1, double num2) {
        return num1 + num2;
    }
}

class Subtraction extends Calculation {
    @Override
    double calculate(double num1, double num2) {
        return num1 - num2;
    }
}

class Multiplication extends Calculation {
    @Override
    double calculate(double num1, double num2) {
        return num1 * num2;
    }
}

class Division extends Calculation {
    @Override
    double calculate(double num1, double num2) {
        if (num2 != 0) {
            return num1 / num2;
        } else {
            System.out.println("Error: Division by zero.");
            return Double.NaN;
        }
    }
}

public class CalculationTest {
    public static void main(String[] args) {
        double num1 = 10.0;
        double num2 = 5.0;

        Addition add = new Addition();
        Subtraction subt = new Subtraction();
        Multiplication mult = new Multiplication();
        Division div = new Division();

        System.out.println("Addition: " + num1 + " + " + num2 + " = " + add.calculate(num1, num2));
        System.out.println("Subtraction: " + num1 + " - " + num2 + " = " + subt.calculate(num1, num2));
        System.out.println("Multiplication: " + num1 + " * " + num2 + " = " + mult.calculate(num1, num2));
        System.out.println("Division: " + num1 + " / " + num2 + " = " + div.calculate(num1, num2));
    }
}




























Simple interface
crickter interface

// Cricketer interface
interface Cricketer {
    final int Id = 1001; // Final variable

    void bowl(); // Abstract method
}

// Implementing class
class Player implements Cricketer {
    @Override
    public void bowl() {
        System.out.println("The cricketer with ID " + Id + " is bowling.");
    }
}

public class CricketTest {
    public static void main(String[] args) {
        Player player = new Player(); // Create an instance of the implementing class

        // Call the bowl() method to demonstrate the capabilities of the interface
        player.bowl();
    }
}


































Vehicl interface..................................
// Vehicle interface
interface Vehicle {
    void changeGear(int newGear);
    void speedUp(int increment);
    void applyBrakes(int decrement);
}

// Bicycle class implementing Vehicle
class Bicycle implements Vehicle {
    private int gear;
    private int speed;

    public Bicycle() {
        gear = 1;
        speed = 0;
    }

    @Override
    public void changeGear(int newGear) {
        gear = newGear;
    }

    @Override
    public void speedUp(int increment) {
        speed += increment;
    }

    @Override
    public void applyBrakes(int decrement) {
        speed -= decrement;
    }

    public void displayStatus() {
        System.out.println("Bicycle: Gear - " + gear + ", Speed - " + speed);
    }
}

// Car class implementing Vehicle
class Car implements Vehicle {
    private int gear;
    private int speed;

    public Car() {
        gear = 1;
        speed = 0;
    }

    @Override
    public void changeGear(int newGear) {
        gear = newGear;
    }

    @Override
    public void speedUp(int increment) {
        speed += increment;
    }

    @Override
    public void applyBrakes(int decrement) {
        speed -= decrement;
    }

    public void displayStatus() {
        System.out.println("Car: Gear - " + gear + ", Speed - " + speed);
    }
}

public class VehicleTest {
    public static void main(String[] args) {
        Bicycle bicycle = new Bicycle();
        Car car = new Car();

        // Perform operations on bicycle
        bicycle.changeGear(3);
        bicycle.speedUp(20);
        bicycle.applyBrakes(5);
        bicycle.displayStatus();

        // Perform operations on car
        car.changeGear(2);
        car.speedUp(40);
        car.applyBrakes(10);
        car.displayStatus();
    }
}







































Drawable............................................



// Step 1: Create the Drawable interface
interface Drawable {
    void draw(); // Abstract method
    default void message() {
        System.out.println("Welcome to Interface in Java");
    }
}

// Step 2: Create the Rectangle class that implements the Drawable interface
class Rectangle implements Drawable {
    @Override
    public void draw() {
        System.out.println("Draw a Rectangle");
    }
}

// Step 3: Create the TestInterface class with the main method
public class TestInterface {
    public static void main(String[] args) {
        // Step 4: Create an object of the Rectangle class
        Rectangle rect = new Rectangle();

        // Step 5: Call the methods draw() and message() for the object created
        rect.draw();
        rect.message();
    }
}
